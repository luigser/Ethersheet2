if (typeof define !== 'function') { var define = require('amdefine')(module) }
define( function(require,exports,module)
{
    const BaseView = require('core_plugins/base_plugin/views/base_view').View;

    const MenuViewEvents = {
        MenuViewEventsMenuCreated   : "MenuViewEventsPrerendering",
        MenuViewEventsMenuRendering : "MenuViewEventsMenuRendering",
        MenuViewEventsAddActions    : "MenuViewEventsAddActions"
    };

    class MenuView extends BaseView {
        constructor(params) {
            super(params);
            this.current_element = params.current_element;
            this.placeholder     = params.el;
            this.config.ELEMENT_TO_FILL  = ".es-context-menu";
            this.config.VIEW             = "menu_view";
            this.template_view   = "menu_view";
            this.events = {
                'click .es-menu-button': 'onButtonClick'
            };

            this.actions       = [];
            this.template_data = { actions : [] };
            this.plugin_manager.subscriveEvent(MenuViewEvents.MenuViewEventsAddActions, this.addActions.bind(this));

            this.loadStyle();
        }

        /* postRendering()
        {
            this.plugin_manager.emitEvent(MenuViewEvents.MenuViewEventsMenuCreated, { menu : this });
        }*/

        update(current_element, element)
        {
            this.el              = element;
            this.current_element = current_element;
            this.plugin_manager.emitEvent(MenuViewEvents.MenuViewEventsMenuRendering, { menu :  this });
        }

        addActions(params)
        {
            if(this.constructor === params.menu_instance.constructor) {
                for (let a in params.actions) {
                    if (_.isUndefined(this.actions[params.actions[a].action])) {
                        this.actions[params.actions[a].action] = params.actions[a].callback;
                        this.template_data.actions.push(params.actions[a].action);
                    }
                }
                this.loadView();
            }
        }

        addAction(action, callback)
        {
            this.actions[action] = callback;
            this.template_data.actions.push(action);
        }

        onButtonClick(e){
            let action = $(e.currentTarget).data('action');
            this.actions[action].call(null, {});
        }
    }

    module.exports.Events = MenuViewEvents;
    module.exports.View   = MenuView;
});
