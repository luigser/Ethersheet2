if (typeof define !== 'function') { var define = require('amdefine')(module) }
define( function(require,exports,module)
{
    const BaseView             = require('core_plugins/base_plugin/views/base_view').View;
    const BaseViewEvents       = require('core_plugins/base_plugin/views/base_view').Events;
    const TableViewEvents      = require('core_plugins/table/views/table_view').Events;

    class CopyAndPasteView extends BaseView
    {
        constructor(params)
        {
            super(params);

            this.events =  {
                "mousedown .es-table-cell": "cellsSelectionMousedown",
                "mouseover .es-table-cell": "cellsSelectionMouseover",
                "mouseup .es-table-cell"  : "cellsSelectionMouseup",
                "dblclick .es-table-cell" : "cellClicked",
                "keydown textarea"        : "inputKeydown"
            };

            this.isMouseDown   = false;
            this.startColIndex = 0;
            this.startRowIndex = 0;
            this.rowStart      = 0;
            this.rowEnd        = 0;
            this.riwIndex      = null;
            this.colStart      = 0;
            this.colEnd        = 0;
            this.colIndex      = 0;
            this.current_cell  = null;

            //set copy,paste and cut handlers
            ['copy','paste','cut'].forEach(function(event) {
                document.addEventListener(event, function(e) {
                    switch(event) {
                        case 'copy':
                            this.onCopy(e);
                            break;
                        case 'paste':
                            this.onPaste(e);
                            break;
                        case 'cut':
                            this.onCut(e);
                            break;
                    }
                }.bind(this));
            }.bind(this));

            //bind keyword event
            this.es_controller.keyboard.on('37',       this.cellsSelectionKeydown.bind(this));//left
            this.es_controller.keyboard.on('38',       this.cellsSelectionKeydown.bind(this));//up
            this.es_controller.keyboard.on('39',       this.cellsSelectionKeydown.bind(this));//right
            this.es_controller.keyboard.on('40',       this.cellsSelectionKeydown.bind(this));//down
            this.es_controller.keyboard.on('shift_37', this.cellsSelectionKeydown.bind(this));
            this.es_controller.keyboard.on('shift_38', this.cellsSelectionKeydown.bind(this));
            this.es_controller.keyboard.on('shift_39', this.cellsSelectionKeydown.bind(this));
            this.es_controller.keyboard.on('shift_40', this.cellsSelectionKeydown.bind(this));
            this.es_controller.keyboard.on('13',       this.cellsSelectionKeydown.bind(this));//enter
            this.es_controller.keyboard.on('27',       this.cellsSelectionKeydown.bind(this));//escape
            this.es_controller.keyboard.on('46',       this.cellsSelectionKeydown.bind(this));//canc

            this.plugin_manager.subscriveEvent(TableViewEvents.TableViewCreatedEvent       , this.readyToRender.bind(this));
            this.plugin_manager.subscriveEvent(TableViewEvents.TableViewRenderindDoneEvent , this.refreshDelegates.bind(this));
        }

        readyToRender()
        {
            super.render();
        }

        refreshDelegates()
        {
            this.delegateEvents(this.events);
        }

        getId()
        {
            //userd to get cid
            return this.es_controller.data.users.getCurrentUser().getCurrentSheetId();
        }

        selectTo(cell)
        {
            let currentColIndex = cell.index();
            currentColIndex = (currentColIndex < 0) ? this.startColIndex : currentColIndex;
            let currentRowIndex = cell.parent().index();
            currentRowIndex = (currentRowIndex < 0) ? this.startRowIndex : currentRowIndex;

            if (currentRowIndex < this.startRowIndex) {
                this.rowStart = currentRowIndex;
                this.rowEnd = this.startRowIndex;
            } else {
                this.rowStart = this.startRowIndex;
                this.rowEnd = currentRowIndex;
            }

            if (currentColIndex < this.startColIndex) {
                this.colStart = currentColIndex;
                this.colEnd = this.startColIndex;
            } else {
                this.colStart = this.startColIndex;
                this.colEnd = currentColIndex;
            }

            for (var i = this.rowStart; i <= this.rowEnd; i++) {
                var rowCells = $('#es-grid-'+this.getId()).find("tr").eq(i).find("td");
                for (var j = this.colStart; j <= this.colEnd; j++) {
                    rowCells.eq(j).addClass("cpselected");
                }
            }
        }

        resetSelection(cell){
            try {
                this.current_cell = cell;
                this.es_controller.table.$grid.find(".cpselected").removeClass("cpselected"); // deselect everything
                cell.addClass("cpselected");
                this.colIndex = this.colStart = this.colEnd = this.startColIndex = cell.index();
                this.rowIndex = this.rowStart = this.rowEnd = this.startRowIndex = cell.parent().index();
            }catch(e){ console.log("Error trying to reset a cell")}
        }

        cellsSelectionMousedown(e)
        {
            //user try to resize the cell
            this.es_controller.table.setCellDragTarget(e);
            if (this.es_controller.table.isDraggingCell()){
                return false;
            }

            if(e.which == 3){
                this.es_controller.table.$grid.find(".cpselected").removeClass("cpselected"); // deselect everything
                this.es_controller.table.showCellMenu(e);
                return false;
            }

            this.es_controller.table.clearOverlays();
            this.isMouseDown = true;
            this.editingCell = false;

            if (e.shiftKey) {
                this.selectTo(cell);
            } else {
                this.resetSelection( $(e.currentTarget));
            }
            return true; // prevent text selection
        }

        cellsSelectionMouseover(e){
            if (!this.isMouseDown) return;
            this.es_controller.table.$grid.find(".cpselected").removeClass("cpselected");
            this.selectTo($(e.currentTarget));
        }

        cellsSelectionMouseup(e){
            if(this.es_controller.table.isDraggingCell()) this.es_controller.table.cellMouseUp(e);
            this.isMouseDown = false;
        }

        cellClicked(e){
            this.editingCell = true;
        }

        //KEYBOARD EVENTS STUFFS

        //hendler for cell editing
        inputKeydown(e)
        {
            //return unless code is 'enter' or 'tab'
            if(this.editingCell == true){
                e.stopPropagation();
            }

            let code = (e.keyCode ? e.keyCode : e.which);
            if(code != 13 && code != 9 && code != 27) return true;

            switch(code)
            {
                case 13://ENTER
                    this.es_controller.table.moveSelection(e,1,0);
                    this.editingCell = true;
                    break;
                case 9://TAB
                    this.es_controller.table.moveSelection(e,0,1);//right
                    break;
                case 27://ESC
                    this.es_controller.table.clearOverlays();
                    this.editingCell = false;
                    this.resetSelection(this.current_cell);
                    break;
            }
            return false;
        }

        //Keypress when cell in not active. Just for copy & paste feature.
        cellsSelectionKeydown(e)
        {
            if(this.editingCell == true){
                e.stopPropagation();
                return true;
            }

            let cell = null;
            let code = (e.keyCode ? e.keyCode : e.which);
            let sheet_table =  $('#es-grid-' + this.getId());
            sheet_table.find(".cpselected").removeClass("cpselected");

            switch(code){
                case 37://LEFT ARROW
                    cell = sheet_table.find("tr").eq(this.rowIndex).find("td").eq( (this.colIndex <= 0) ? 0 : --this.colIndex );
                    break;
                case 38://UP ARROW
                    cell = sheet_table.find("tr").eq((this.rowIndex <= 0) ? 0 :  --this.rowIndex).find("td").eq(this.colIndex);
                    break;
                case 39://RIGHT ARROW
                    cell = sheet_table.find("tr").eq(this.rowIndex).find("td").eq( (this.colIndex < this.es_controller.table.getSheet().cols.length) ? ++this.colIndex : this.colIndex );
                    break;
                case 40://DOWN ARROW
                    cell = sheet_table.find("tr").eq( (this.rowIndex < this.es_controller.table.getSheet().rows.length) ? ++this.rowIndex : this.rowIndex ).find("td").eq(this.colIndex);
                    break;
                case 13://ENTER
                    //user's dragging a cell to resize it
                    if (this.es_controller.table.isDraggingCell()) return;

                    cell = sheet_table.find("tr").eq(this.rowIndex).find("td").eq(this.colIndex);
                    this.es_controller.table.clearOverlays();
                    this.es_controller.table.getLocalSelection().addCell(this.es_controller.table.getSheet().id,$(cell).data().row_id.toString(),$(cell).data().col_id.toString());
                    this.current_cell = cell;
                    this.editingCell = true;
                    break;
                case 46://CANC
                    this.deleteCellsContent();
                    break;
                case 9://TAB
                    this.es_controller.table.moveSelection(e,0,1);//right
                    break;
                case 27://ESC
                    this.es_controller.table.clearOverlays();
                    this.editingCell = false;
                    this.resetSelection(this.current_cell);
                    break;
            }

            if (e.shiftKey) {
                this.selectTo(cell);
            } else {
                this.resetSelection(cell)
            }

            return false;
        }

        deleteCellsContent()
        {
            let cell = null;
            for (var i = this.rowStart; i <= this.rowEnd; i++) {
                for (var j = this.colStart; j <= this.colEnd; j++) {
                    cell = this.es_controller.table.$grid.find("tr").eq(i).find("td").eq(j);
                    this.es_controller.table.getSheet().updateCell($(cell).attr('data-row_id'), $(cell).attr('data-col_id'),"");
                }
            }
        }

        //COPY AND PASTE HANDLERS
        onPaste(e)
        {
            let cell = null;
            try {
                var clipRows = e.clipboardData.getData('text/plain').split(String.fromCharCode(13));
                for (var i = 0; (i < clipRows.length && i + this.startColIndex < this.es_controller.table.getSheet().rowCount()); i++) {
                    clipRows[i] = clipRows[i].split(String.fromCharCode(9));
                    for (var j = 0; (j < clipRows[i].length && j + this.startColIndex < this.es_controller.table.getSheet().colCount()); j++) {
                        cell = this.es_controller.table.$grid.find("tr").eq(i + this.startRowIndex).find("td").eq(j + this.startColIndex);
                        this.es_controller.table.getSheet().updateCell($(cell).attr('data-row_id'), $(cell).attr('data-col_id'), clipRows[i][j]);
                    }
                }
                e.clipboardData.setData('text/plain', "");
                e.preventDefault();
            }catch(e){
                console.log("onPaste error : " + e);
            }
        }

        onCopy(e)
        {
            try {
                e.clipboardData.setData('text/plain', "");
                var cbData = "";
                for (var i = this.rowStart; i <= this.rowEnd; i++) {
                    var rowCells = this.es_controller.table.$grid.find("tr").eq(i).find("td");
                    for (var j = this.colStart; j <= this.colEnd; j++)
                        cbData += $(rowCells.eq(j)).text() + ((j != this.colEnd) ? String.fromCharCode(9) : "");

                    if(i != this.rowEnd)cbData += String.fromCharCode(13);
                }
                e.clipboardData.setData('text/plain', cbData);
                e.preventDefault();
            }catch(e){
                console.log("onCopy error : " + e);
            }
        }

        onCut(e){
            this.onCopy(e);
            this.deleteCellsContent();
        }

    };

    module.exports.View = CopyAndPasteView;
});
