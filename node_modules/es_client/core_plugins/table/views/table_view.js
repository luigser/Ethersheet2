if (typeof define !== 'function') { var define = require('amdefine')(module) }
define( function(require,exports,module) {
    //thd-party library
    var h = require('es_client/helpers');

    const BaseView       = require('core_plugins/base_plugin/views/base_view').View;
    const BaseViewEvents = require('core_plugins/base_plugin/views/base_view').Events;
    const ColMenuView    = require('./col_menu_view').View;
    const RowMenuView    = require('./row_menu_view').View;
    const CellMenuView   = require('./cell_menu_view').View;

    const TableViewEvents = {
        TableViewCreatedEvent             : "TableViewCreatedEvent",
        TableViewModelRenderingEvent      : "TableViewModelRenderingEvent",
        TableViewInitializeScrollingEvent : "TableViewInitializeScrollingEvent",
        TableViewRenderindDoneEvent       : "TableViewRenderindDoneEvent",
        TableViewResizedEvent             : "TableViewResizedEvent",
    };

    class TableView extends BaseView {
        constructor(params) {
            super(params);

            this.MIN_CELL_WIDTH  = 22;
            this.MIN_CELL_HEIGHT = 22;

            this.events = {
                'mousedown .es-table-cell'      : 'cellMouseDown',
                'mousemove .es-table-cell'      : 'cellMouseMove',
                'mouseup .es-table-cell'        : 'cellMouseUp',
                'dblclick .es-table-cell'       : 'cellClicked',
                'click .es-row-header'          : 'showRowMenu',
                'click .es-column-header'       : 'showColMenu',
                'mousedown .es-table-cell'      : 'showCellMenu',
                'mouseover .es-table-cell'      : 'showCellPreview',
                'contextmenu .es-column-header' : 'showColMenu',
                'contextmenu .es-row-header'    : 'showRowMenu',
                'change .es-table-cell-input'   : 'changeCell'
            };

            this.is_rendered            = false;
            this.draggedCell            = null;
            this.draggingRow            = false;
            this.draggingCol            = false;
            this.data                   = this.es_controller.data;
            this.$grid                  = null;
            this.current_cell           = null;
            this.cell_menu_current_cell = null;

            this.setCurrentUser(this.data.users.getCurrentUser() || null);
            this.setSheet(this.data.sheets.get(this.getCurrentUser().getCurrentSheetId()) || null);
            this.setSheets(this.data.sheets || null);
            this.setSelections(this.data.selections || null);
            this.setLocalSelection(this.data.selections.getLocal() || null);
            _.defer(function(caller){
                caller.onRefreshCells();
            }, this);

            this.row_menu_view = new RowMenuView({
                el         : null,
                config     : JSON.parse(JSON.stringify(this.config)),//Fast way to clone object
                es         : this.es_controller,
                es_el      : this.es_node_element,
                es_header  : this.es_node_header_element,
                es_panel_0 : this.es_node_header_panel_0,
                es_panel_1 : this.es_node_header_panel_1,
                row_id     : null
            });

            this.col_menu_view = new ColMenuView({
                el         : null,
                config     : JSON.parse(JSON.stringify(this.config)),
                es         : this.es_controller,
                es_el      : this.es_node_element,
                es_header  : this.es_node_header_element,
                es_panel_0 : this.es_node_header_panel_0,
                es_panel_1 : this.es_node_header_panel_1,
                col_id     : null
            });

            this.cell_menu_view = new CellMenuView({
                el              : null,
                config          : JSON.parse(JSON.stringify(this.config)),
                es              : this.es_controller,
                es_el           : this.es_node_element,
                es_header       : this.es_node_header_element,
                es_panel_0      : this.es_node_header_panel_0,
                es_panel_1      : this.es_node_header_panel_1,
                current_element : null
            });



            $(window).resize(this.resize.bind(this));

            document.oncontextmenu = function() {
                return false;
            };

            //TODO
            window.addEventListener('message', function(e) {
                /*var $cell = $("#"+ this.cell_menu_current_cell.data('cell_id'));
                $cell.val(e.data);
                this.getSheet().updateCell(this.cell_menu_current_cell.data('row_id'), this.cell_menu_current_cell.data('col_id'), e.data);
                this.updateCellInput($cell);*/
            }.bind(this));

            this.template_data       = { id : this.getId(), sheet : this.getSheet() };
            this.es_controller.table = this;
            this.plugin_manager.emitEvent(TableViewEvents.TableViewCreatedEvent, {}, true);
        }

        preRendering()
        {
            this.render();
        }

        postRendering()
        {
            this.plugin_manager.emitEvent(TableViewEvents.TableViewRenderindDoneEvent, {});
        }

        initializeElements()
        {
            super.initializeElements();
            this.$table             = $('#es-grid-' + this.getId(),this.$el);
            this.$grid              = $('#es-grid-container-' + this.getId(),this.$el);
            this.$table_col_headers = $('#es-column-headers-' + this.getId(),this.$el);
            this.$table_row_headers = $('#es-row-headers-' + this.getId(),this.$el);
            this.initializeScrolling();
        }

        destroy(){
            this.remove();
            this.models.unsetAll();
            this.models = null;
        }

        // ## MODEL SETTERS
        setSheet(sheet){
            this.models.set('sheet', sheet,{
                'update_cell'        : 'onUpdateCell',
                'commit_cell'        : 'onCommitCell',
                'resize_cell'        : 'resizeCell',
                'insert_col'         : 'modelRender',
                'delete_col'         : 'modelRender',
                'insert_row'         : 'modelRender',
                'delete_row'         : 'modelRender',
                'sort_rows'          : 'modelRender',
                'refresh_cells'      : 'onRefreshCells',
                'add_format_to_cell' : 'updateCellClass'
            });
        }

        setSheets(sheets){
            this.models.set('sheets', sheets,{});
        }

        updateCellClass(row_id, col_id, cls){
            let $cell = $('#'+row_id+'-'+col_id, this.el);//CHECK
            $cell.addClass(cls);
        }

        onRefreshCells(){
            let sheet = this.getSheet();
            $('.es-usd').each(function(idx, el){
                $el = $(el);
                let cell = sheet.getCell($el.data('row_id'), $el.data('col_id'));
                let cell_display = parseFloat(sheet.getCellDisplay(cell));
                if(_.isNaN(cell_display)){ return; }
                $el.text('$' + cell_display.toFixed(2));
            });
        }

        setSelections(selections){
            this.models.set('selections', selections,{
                'add_cell'   : 'onRemoteAddCell',
                'select_row' : 'onRemoteAddCells',
                'select_col' : 'onRemoteAddCells',
                'clear'      : 'onClear'
            });
        }

        setCurrentUser(current_user){
            this.models.set('current_user', current_user, {
                'change_current_sheet_id': 'onChangeCurrentSheetId'
            });
        }

        setLocalSelection(local_selection){
            this.models.set('local_selection', local_selection,{
                'add_cell'   : 'onLocalAddCell',
                'select_row' : 'onLocalAddCells',
                'select_col' : 'onLocalAddCells',
                'clear'      : 'onClear'
            });
        }

        // ## MODEL GETTERS
        unpaintCell(cell){
            let $cell = $('#'+cell.row_id+'-'+cell.col_id, this.el);//CHECK
            $cell.css('background-color', '');
        }

        onRemoteAddCell(cell){
            this.paintCell(cell);
        }

        // ## SELECTION EVENTS
        onLocalAddCells(cells){
            let self = this;
            let first_cell = cells.shift();
            self.onLocalAddCell(first_cell);
            _.each(cells, function(cell){
                self.paintCell(cell);
            });
            cells.unshift(first_cell);
        }

        onLocalAddCell(cell){
            //let $cell = $('#'+cell.row_id+'-'+cell.col_id, this.el);
            let $cell = $('#'+cell.row_id+'-'+cell.col_id);
            let e = {currentTarget: $cell};

            this.paintCell($cell);
            this.createCellInput(e);
        }

        onRemoteAddCells(cells){
            let self = this;
            _.each(cells, function(cell){
                self.paintCell(cell);
            });
        }

        onRemoteAddCell(cell){
            this.paintCell(cell);
        }

        onClear(cells){
            let table = this;
            _.each(cells, function(cell){
                table.unpaintCell(cell);
            });
        }

        // ## SHEET EVENTS
        onUpdateCell(cell){
            let $el = $('#'+cell.row_id+'-'+cell.col_id);
            $el.text(cell.cell_display);
            let input =$('#' + $el.attr('id') + '-input');
            if(input.length > 0){
                input.val(cell.cell_display);
            }
            this.resizeRowHeader(cell.row_id);
            this.updateCellInputs();
        }

        onCommitCell(cell){
            this.onUpdateCell(cell);
        }

        // ## RENDERING

        paintCell(cell){
            let $cell = $('#'+cell.row_id+'-'+cell.col_id, this.el);
            $cell.css('background-color', cell.color);
        }

        drawHeaders(row_header_offset)
        {
            setTimeout(function() {
                this.drawRowHeaders(row_header_offset)
            }.bind(this),100);
            setTimeout(this.drawColHeaders.bind(this),100);
        }

        render(e){
            (_.isUndefined(e)) ? super.render() : super.loadView();

            this.initializeElements();
            this.initializeScrolling();
            this.initializeSelections();
            this.drawHeaders((!_.isUndefined(e)) ? e.row_headers_offset : null);

            this.$grid = $(".es-grid-container",this.$el);
            this.is_rendered = true;
            this.resize();

            if(e != undefined && e.row_id != undefined && this.getSheet().send_enabled){
                $("#es-grid-container-" + e.sheet_id).scrollTop($("[data-row_id='" + e.row_id + "']").offset().top - 100);
            }
            return this;
        }

        modelRender(e)
        {
            this.plugin_manager.emitEvent(TableViewEvents.TableViewModelRenderingEvent, {arg : e}, true)
        }

        /*paginationRender(e){
            if(!_.isUndefined(e.action)){
                if(e.action == "sortRows")
                    location.reload(true);
                //this.table_function_menu_instance.pageSelection(1);
            }else {
                this.table_function_menu_instance.recalculateMetrix();
                this.table_function_menu_instance.getPagination();
                this.table_function_menu_instance.goToPageInGrid();
            }
        }*/

        resize(){
            if(!this.is_rendered) return;
            let grid_height = this.$el.innerHeight() + 4;
            let grid_width = this.$el.innerWidth() - 45;
            this.$grid.height(grid_height);
            this.$grid.width(grid_width);
            this.plugin_manager.emitEvent(TableViewEvents.TableViewResizedEvent, {});
        }

        initializeSelections(){
            this.getSelections()
                .each(function(selection){
                    selection.redraw();
                });
        }

        initializeScrolling(){
            let view    = this;
            let grid_el = this.$grid[0];

            this.$grid.scroll(function(e){
                e.preventDefault();
                e.stopPropagation();
                view.$table_col_headers.css('left',(0-grid_el.scrollLeft)+"px");
                view.$table_row_headers.css('top',(0-grid_el.scrollTop)+"px");
                view.plugin_manager.emitEvent(TableViewEvents.TableViewInitializeScrollingEvent, {})
                return false;
            });
        }

        // ## ROW METHODS
        drawRowHeaders(row_headers_offset)
        {
            let view = this;
            let html = '';
            let row_name = '';
            let height = null;

            if(_.isUndefined(row_headers_offset)) row_headers_offset = 0;
            //let row_headers_offset = (rh) ? rh.row_headers_offset : 0;

            _.each(this.getSheet().rowIds(), function(row_id,index){
                row_name =  row_headers_offset + index + 1;
                height   = view.heightForRow(row_id);
                html    +='<tr id="es-header-'+row_id+'" style="height:'+height+'px;"><th class="es-row-header"  data-row_id="'+row_id+'">'+row_name+' <img src="/es_client/icons/ethersheet-downarrow.png" class="es-menu-arrow"></th></tr>'
            });

            $('#es-row-headers-'+this.getId()/*,this.$el*/).html(html);
        }

        heightForRow(row_id){
            let row_el = document.getElementById(row_id);
            if(row_el){
                return row_el.offsetHeight;
            }
            return undefined;
        }

        resizeRowHeader(row_id){
            let header = document.getElementById("es-header-"+row_id);
            let height = this.heightForRow(row_id);
            if(!header || !height) return;
            header.style.height = height+"px";
        }

        resizeRow(row_id,height){
            let row_el = document.getElementById(row_id);
            if(!row_el || !height) return;
            if(height < this.MIN_CELL_HEIGHT) height = this.MIN_CELL_HEIGHT;
            row_el.style.height = height+"px";
        }

        // ## COLUMN METHODS
        drawColHeaders(){
            let view  = this;
            let html  = '';
            let width = null;

            _.each(this.getSheet().colIds(), function(col_id,index){
                width = view.widthForCol(col_id);

                var header = (view.getSheet().cells[view.getSheet().allRows[0]] == undefined || view.getSheet().cells[view.getSheet().allRows[0]][col_id] == undefined ) ? h.columnIndexToName(index) : view.getSheet().cells[view.getSheet().allRows[0]][col_id].value;
                html +='<th id="es-col-header-'+col_id+'" data-col_id="'+col_id+'" class="es-column-header" style="width:'+width+'px;">'
                    + header
                    +'<img src="/es_client/icons/ethersheet-downarrow.png" class="es-menu-arrow">'
                    +'</th>';
            });

            $('#es-column-headers-'+this.getId()/*,this.$el*/).html(html);
        }

        widthForCol(col_id){
            let row_id = this.getSheet().rowAt(0);
            let col_el = document.getElementById(row_id+'-'+col_id);
            if(col_el){
                return col_el.clientWidth;
            }
            return undefined;

        }

        resizeColHeaders(col_id){
            let view = this;
            _.each(this.getSheet().colIds(), function(col_id){
                view.resizeColHeader(col_id);
            });
        }

        resizeColHeader(col_id){
            let header = document.getElementById("es-col-header-"+col_id);
            let width = this.widthForCol(col_id);
            if(!header || !width) return;
            header.style.width = width+"px";
        }

        resizeCol(col_id,width){
            let row_id = this.getSheet().rowAt(0);
            let col_el = document.getElementById(row_id+'-'+col_id);
            if(!col_el) return;
            if(width < this.MIN_CELL_WIDTH) width = this.MIN_CELL_WIDTH;
            col_el.style.width = width+"px";
        }

        // ## CELL EVENTS
        cellClicked(e){
            if (this.isDraggingCell()) return;
            this.selectCell(e);
            this.current_cell = $(e.currentTarget);
        }

        cellMouseDown(e){
            this.clearOverlays();
            this.setCellDragTarget(e);
            if (this.isDraggingCell()){
                return false;
            }
        }

        cellMouseMove(e){
            if(!this.isDraggingCell()){
                let $cell = $(e.currentTarget);
                if(this.isOverRowDragHandle($cell,e.pageY)){
                    this.$table.css("cursor","ns-resize");
                } else if(this.isOverColDragHandle($cell,e.pageX)){
                    this.$table.css("cursor","ew-resize");
                } else {
                    this.$table.css("cursor","pointer");
                }
            } else if(this.draggingRow){
                let height = e.pageY - this.draggedCell.offset().top;
                let width = null;
                let row_id = this.draggedCell.data('row_id');
                let col_id = this.draggedCell.data('col_id');
                this.getSheet().disableSend();
                this.getSheet().resizeCell(row_id,col_id,width,height);
                this.getSheet().enableSend();
                return false;
            } else if(this.draggingCol){
                let height = null;
                let width = e.pageX - this.draggedCell.offset().left;
                let row_id = this.draggedCell.data('row_id');
                let col_id = this.draggedCell.data('col_id');

                this.getSheet().disableSend();
                this.getSheet().resizeCell(row_id,col_id,width,height);
                this.getSheet().enableSend();
                return false;
            }
        }

        cellMouseUp(e){
            if(!this.isDraggingCell()) return;

            if(this.draggingRow){
                let height = e.pageY - this.draggedCell.offset().top;
                let width = null;
                let row_id = this.draggedCell.data('row_id');
                let col_id = this.draggedCell.data('col_id');

                this.getSheet().resizeCell(row_id,col_id,width,height);
            } else if(this.draggingCol){
                let height = null;
                let width = e.pageX - this.draggedCell.offset().left;
                let row_id = this.draggedCell.data('row_id');
                let col_id = this.draggedCell.data('col_id');

                this.getSheet().resizeCell(row_id,col_id,width,height);
            }

            this.draggedCell = null;
            this.draggingRow = false;
            this.draggingCol = false;
            return false;
        }

        resizeCell(row_id,col_id,width,height)
        {
            if(height) this.resizeRow(row_id,height);
            if(width) this.resizeCol(col_id,width);
            this.resizeRowHeader(row_id);
            this.resizeColHeader(col_id);
            this.updateCellInputs();
        }

        changeCell(e){
            let $el = $(e.currentTarget);
            let data = $el.data();
            this.getSheet().commitCell(data.row_id.toString(), data.col_id.toString());
        }

        showCellPreview(e){
            return; //CHECK
            let cell  = $(e.currentTarget);
            let xOffset = 10;
            let yOffset = 10;
            let preview = $("#cell-preview");
            let mapPreview;

            if((/\.(gif|jpg|jpeg|tiff|png)$/i).test(cell.text())){//image
                preview.html("<img src='" + cell.html() + "' alt='Image preview' />");
            }else if((/^[-]?[0-9]{1,2}[.]{1}[0-9]+[,]{1}[\s]?[-]?[0-9]{1,2}[.]{1}[0-9]+$/g).test(cell.text())){//geographic coords
                mapPreview = new MapView({
                    el: preview,
                    cell: cell,
                    table: this,
                    coords : cell.text().split(",").map(Number).reverse()
                });
            }else if((/^\{/i).test(cell.text()) && (/\}$/i).test(cell.text())){//geojson
                mapPreview = new MapView({
                    el: preview,
                    cell: cell,
                    table: this,
                    geojson : cell.text()
                });
            }else{
                return;
            }

            preview.css({
                "top": (e.pageY - yOffset) + "px",
                "left": (e.pageX + xOffset) + "px",
                'display': 'block'
            });

            if(!_.isUndefined(mapPreview)){
                mapPreview.render();
            }

            cell.on('mouseleave', function (e) {
                preview.off('click');
                preview.hide();
            });
        }

        // ## CELL DRAGGING
        isDraggingCell(){
            if (this.draggedCell) return true;
            return false;
        }

        isOverRowDragHandle($cell,y){
            let distance_from_cell_bottom = $cell.offset().top + $cell.height() - y;
            if(distance_from_cell_bottom < 4) return true;
            return false;
        }

        isOverColDragHandle($cell,x){
            let distance_from_cell_right = $cell.offset().left + $cell.width() - x;
            if(distance_from_cell_right < 4) return true;
            return false;
        }

        setCellDragTarget(e){
            if (this.draggedCell) return this.draggedCell;
            let $cell = $(e.currentTarget);
            if(this.isOverRowDragHandle($cell,e.pageY)){
                this.draggedCell = $cell;
                this.draggingRow = true;
                this.draggingCol = false;
            } else if(this.isOverColDragHandle($cell,e.pageX)) {
                this.draggedCell = $cell;
                this.draggingRow = false;
                this.draggingCol = true;
            } else {
                this.draggedCell = null;
            }
        }

        // ## CELL INPUT FIELD

        createCellInput(e){
            if(e.currentTarget.length == 0) return;
            let $el = $(e.currentTarget);
            let row_id = $el.data().row_id.toString();
            let col_id = $el.data().col_id.toString();
            let cell_id = $el.attr('id');
            let cell_value = this.getSheet().getDisplayFormula(row_id,col_id);

            let $input = $("<textarea id='"+cell_id+"-input' data-row_id='"+row_id+"' data-col_id='"+col_id+"' data-cell_id='"+cell_id+"' class='es-table-cell-input es-overlay'>"+cell_value+"</textarea>");

            this.$grid.append($input);

            let sheet = this.getSheet();
            $input.on('keyup', function(){
                sheet.updateCell(row_id, col_id, $input.val());
            });
            this.updateCellInput($input);
            $input.focus();
            return $input;
        }

        updateCellInput($input){
            let s = this.getSelections().getLocal();
            let $cell = $("#"+$input.data().cell_id.toString());
            let x = $cell.position().left + this.$grid.scrollLeft();
            let y = $cell.position().top + this.$grid.scrollTop();;
            let width = $cell.width();
            let height = $cell.height()/* - 2*/;
            let color = s.getColor();
            let style="left: "+x+"px; top: "+y+"px; width: "+width+"px; height: "+height+"px; background-color: "+color;
            $input.attr("style",style)
        }

        updateCellInputs(){
            let table = this;
            $('.es-table-cell-input').each(function(idx, el){
                table.updateCellInput($(el));
            })
        }

        removeCellInputs(){
            $('.es-table-cell-input').remove();
        }

        // ## CELL SELECTIONS
        addCellToSelection(e){
            let s = this.getLocalSelection();
            let data = $(e.currentTarget).data();
            s.addCell(this.getSheet().id,data.row_id.toString(),data.col_id.toString());
        }

        selectCell(e){
            let s = this.clearOverlays();
            this.addCellToSelection(e);
        }

        selectRow(e){
            let sel = this.getLocalSelection();
            let sheet = this.getSheet();
            let row_pos = $(e.currentTarget).text();
            let row_id = sheet.rowAt(row_pos - 1);
            sel.clear();
            sel.addRow(sheet.id, row_id);
        }

        selectCol(e){
            let col_id = $(e.currentTarget).attr('id').replace('es-col-header-','');
            let sel = this.getLocalSelection();
            sel.clear();
            sel.addColumn(this.getSheet().id, col_id);
        }

        moveSelection(e, row_offset, col_offset){
            let selection = this.getLocalSelection();
            let old_cell = selection.getCells()[0];
            let rows = this.getSheet().rows;
            let cols = this.getSheet().cols;
            let new_col_idx = _.indexOf(cols,old_cell.col_id) + col_offset;
            let new_col = cols[new_col_idx];
            let new_row_idx = _.indexOf(rows,old_cell.row_id) + row_offset;
            let new_row = rows[new_row_idx];
            selection.clear();
            selection.addCell(this.getSheet().id, new_row, new_col);
        }

        // ## SHEET LEVEL EVENTS
        onChangeCurrentSheetId(e){
            let sheet_id = this.getCurrentUser().getCurrentSheetId();
            let sheet = this.getSheets().get(sheet_id);
            this.setSheet(sheet);
            this.render();
        }

        showCellMenu(e){
            if(e.which == 3)//right click
            {
                e.preventDefault();
                this.clearOverlays();
                this.addCellToSelection(e);
                let $selectedCell = $(e.currentTarget);
                let pos           = $selectedCell.position();

                let width = $selectedCell.outerWidth();
                let left  = pos.left + width; //offset;
                let top   = e.clientY;
                let html  = "<div class='es-context-menu es-overlay' style='left:"+left+"px;top:"+top+"px;position: absolute;'></div>";
                let $menu = $(html);

                this.cell_menu_view.update($selectedCell, $menu);
                this.$el.append($menu);
            }else{
                this.cellMouseDown(e);
            }
        }

        showColMenu(e){//CHECK
            e.preventDefault();
            this.clearOverlays();
            let $headerCell = $(e.currentTarget)
            $headerCell.addClass('es-header-active');
            let pos    = $headerCell.position();
            let offset = this.$table_col_headers.position().left + Number(this.$table_col_headers.css("margin-left").replace("px",""));

            let left  = pos.left + offset;
            let top   = pos.top + $headerCell.innerHeight();
            let width = $headerCell.outerWidth()
            let html  = "<div class='es-context-menu es-overlay' style='left:"+left+"px;top:"+top+"px;position: absolute;'></div>";
            let $menu = $(html);

            this.col_menu_view.update(String($headerCell.data("col_id")), $menu);
            this.col_menu_view.loadView();
            this.$el.append($menu);
        }

        showRowMenu(e){
            e.preventDefault();
            this.clearOverlays();
            let $headerCell = $(e.currentTarget);
            $headerCell.addClass('es-header-active');
            let pos = $headerCell.position();
            let offset = this.$table_row_headers.position().top + Number(this.$table_row_headers.css("margin-top").replace("px",""));

            let left = pos.left + $headerCell.outerWidth();
            let top = pos.top + offset;
            let width = $headerCell.outerWidth()
            let html = "<div class='es-context-menu es-overlay' style='left:"+left+"px;top:"+top+"px;position: absolute;'></div>";
            let $menu = $(html);

            this.row_menu_view.update(String($headerCell.data("row_id")), $menu);
            this.row_menu_view.loadView();
            this.$el.append($menu);
        }

        clearOverlays(){
            $(".es-header-active").removeClass("es-header-active");
            $(".es-overlay").remove();
            this.getLocalSelection().clear();
        }
    }

    module.exports.Events = TableViewEvents;
    module.exports.View   = TableView;
});
