if (typeof define !== 'function') { var define = require('amdefine')(module) }
define( function(require,exports,module)
{
    const ExpressionHelpers = require('../../../lib/expression_helpers');

    const BaseView = require('core_plugins/base_plugin/views/base_view').View;

    class ExpressionEditorView extends BaseView {
        constructor(params) {
            super(params);
            this.events = {
                'keyup  .es-expression-editor-input' : 'inputKeypress',
                'keydown'                            : 'inputKeydown',
                'blur .es-expression-editor-input'   : 'inputOnBlur',
                'focus .es-expression-editor-input'  : 'inputOnFocus',
                'click #es-expression-wizard'        : 'showExpressionWizard'
            };

            this.template_data = {title : ""};
        }

        /*render(){
            super.render();
            let $el = this._$el = $('<div class="es-expression-editor">');
            $el.html(t.expression_editor);
            this.swapElement();
        }*/

        initializeElements()
        {
            super.initializeElements();
        }

        setSelections(selections){
            this.models.set('selections',selections,{
                'add_cell': 'onAddCell',
                'clear': 'onClear'
            });
        }

        getSelections(){
            return this.models.get('selections');
        }

        preRendering()
        {
            this.render();
        }

        inputKeydown(e){
            let code = (e.keyCode ? e.keyCode : e.which);
            if(code == 13 || code == 9) return false;
        }

        inputKeypress(e){
            $input = $(e.currentTarget)
            let code = (e.keyCode ? e.keyCode : e.which);
            if(code == 13){
                this.handleEnterKeypress();
                return false;
            };
            if(code == 9){
                this.handleTabKeypress();
                return false;
            };
            this.getSheet().updateCell(this.currentCell.row_id, this.currentCell.col_id, $input.val());
        }

        handleEnterKeypress(){
            this.getSheet().commitCell(this.currentCell.row_id, this.currentCell.col_id);
            this.moveSelection(1,0);
        }

        handleTabKeypress(){
            this.getSheet().commitCell(this.currentCell.row_id, this.currentCell.col_id);
            this.moveSelection(0,1);
        }

        moveSelection(row_offset, col_offset){
            let selection = this.getSelections();
            let old_cell = selection.getCells()[0];
            let rows = this.getSheet().rows;
            let cols = this.getSheet().cols;
            let new_col_idx = _.indexOf(cols,old_cell.col_id) + col_offset;
            let new_col = cols[new_col_idx];
            let new_row_idx = _.indexOf(rows,old_cell.row_id) + row_offset;
            let new_row = rows[new_row_idx];
            selection.clear();
            selection.addCell(this.getSheet().id, new_row, new_col);
        }

        inputOnBlur(e){
            this.getSheet().commitCell(this.currentCell.row_id,this.currentCell.col_id);
            $('.es-expression-editor-input').css('height','30px');
            $('#es-expression-editor-container').css('height', '100px');
        }

        inputOnFocus(e){
            $('.es-expression-editor-input').css('height','400px');
            $('#es-expression-editor-container').css('height', '500px');
        }

        onUpdateCell(cell){
            let s = this.getSelections().getCells()[0];
            if(!s || cell.row_id != s.row_id || cell.col_id != s.col_id) return;
            let $form = $('.ExpressionEditor input');
            $form.val(this.getSheet().getCellDisplayById(cell.row_id, cell.col_id));
        }

        showExpressionWizard(){
            let eh = new ExpressionHelpers();
            let output = "<div id='es-modal-close'>[close]</div><h2>List of Ethersheet Functions</h2><div id='es-func-list'>";
            _.each(eh.userFunctions,function(func){
                if(!func || !func.def){ return };
                output += "<p>" + func.def + " - " + func.desc + "</p>";
            });
            output += "</div></div>";
            $('#es-modal-box').html(output);
            $('#es-modal-overlay').show();
        }

    }

    module.exports.View = ExpressionEditorView;
});
