define( function(require,exports,module)
{
    //thd-party library
    const hightlight = require('jquery.highlight-5');

    const BaseView         = require('core_plugins/base_plugin/views/base_view').View;
    const BaseViewEvents   = require('core_plugins/base_plugin/views/base_view').Events;
    const TableViewEvents  = require('core_plugins/table/views/table_view').Events;

    class PaginationView extends BaseView {
        constructor(params) {
            super(params);

            this.events = {
                'search #filter_key'           : 'onSearch',
                'keyup #filter_key'            : 'onSearch',
                'click #pagination_prev'       : 'prev',
                'click #pagination_next'       : 'next',
                'click a.page'                 : 'onPageSelection',
                'change #chunk_length'         : 'onChunkChange',
                'click .search_arrows_enabled' : 'getNewResult'
            };

            this.chunk = this.config.DEFAULT_CHUNK_SIZE;
            this.size  = Math.floor(this.es_controller.table.getSheet().allRows.length / this.chunk);
            this.code  = "";
            this.page  = 1;
            this.step  = 3;
            //scrolling feature variables
            this.lastScrollTop          = 0;
            this.max_scroll             = 0;
            this.rows_in_last_page      = 0;
            this.rows_delta             = 10;
            this.first_index_row        = 0;
            this.last_row_index         = 0;
            //search
            this.current_results            = {};//map with current search results
            this.current_selected_result    = 0;
            this.search_key                 = "";
            this.previous_result_cells      = [];
            this.current_cell_to_scroll = null;

            this.rows_in_last_page =  this.es_controller.table.getSheet().allRows.length % this.chunk;
            if(this.rows_in_last_page > 0) this.size += 1;

            this.plugin_manager.subscriveEvent(TableViewEvents.TableViewCreatedEvent,             this.readyToRender.bind(this));
            this.plugin_manager.subscriveEvent(TableViewEvents.TableViewInitializeScrollingEvent, this.initializeScrolling.bind(this));
            this.plugin_manager.subscriveEvent(TableViewEvents.TableViewModelRenderingEvent,      this.paginationRendering.bind(this));
            this.plugin_manager.subscriveEvent(TableViewEvents.TableViewRenderindDoneEvent ,      this.tableRenderingDone.bind(this));

            this.initializeElements();
            this.getPagination();
            this.template_data = {pagination_code : this.code};
        }

        initializeElements()
        {
            super.initializeElements();
            this.search_up_element             = $('#search_up');
            this.search_down_element           = $('#search_down');
            this.search_info_element           = $('#search_info');
            this.filter_key_element            = $("#filter_key");
            this.pagination_controller_element = $('#pagination_controller');
        }

        readyToRender()
        {
            this.es_controller.pagination_controller = this;
            super.render();
        }

        initializeScrolling()
        {
            this.scroll();
        }

        postRendering(){
           this.pageSelection(1);
        }

        tableRenderingDone()
        {
            this.highlightSearchResults();
            if(!_.isNull(this.current_cell_to_scroll)) this.scrollTo($("#" + this.current_cell_to_scroll));
        }

        paginationRendering(e)
        {
            if(!_.isUndefined(e.action)){
                if(e.action == "sortRows")
                    location.reload(true);
            }else {
                this.recalculateMetrix();
                this.pageSelection();
            }
        }

        recalculateMetrix()
        {
            this.size = Math.floor(this.es_controller.table.getSheet().allRows.length / this.chunk);
            this.rows_in_last_page = this.es_controller.table.getSheet().allRows.length % this.chunk;
        }

        getFirstRowIndex(){
            return this.first_index_row;
        }

        //SEARCH STUFFS
        resetSearchBar()
        {
            _.each(this.previous_result_cells, function(cell){
                cell.removeHighlight();
            });

            this.search_up_element.removeClass('search_arrows_enabled');
            this.search_down_element.removeClass('search_arrows_enabled');
            this.search_info_element.html("0 of 0");
            this.current_selected_result = 0;
            this.current_results = {};
        }

        setSearchArrows()
        {
            let results_len = Object.keys(this.current_results).length;

            if(this.current_selected_result == 1 && this.current_selected_result < results_len){
                this.search_up_element.removeClass('search_arrows_enabled');
                this.search_down_element.addClass('search_arrows_enabled');
            }else if(this.current_selected_result == results_len){
                this.search_down_element.removeClass('search_arrows_enabled');
                this.search_up_element.addClass('search_arrows_enabled');
            }else{
                this.search_up_element.addClass('search_arrows_enabled');
                this.search_down_element.addClass('search_arrows_enabled');
            }
        }

        gotoSearchResult()
        {
            //get the page related to the current result and go to the page
            let current_cell_keys = this.current_results[Object.keys(this.current_results)[this.current_selected_result - 1]];
            this.pageSelection(this.getPageForRow(current_cell_keys.row_id));
            //scroll to the cell related to the current result
            this.current_cell_to_scroll = current_cell_keys.row_id + "-" + current_cell_keys.col_id;//$('td[data-row_id="' + current_cell_keys.row_id + '"][data-col_id="' + current_cell_keys.col_id + '"]');
        }

        getNewResult(e)
        {
            let results_len = Object.keys(this.current_results).length;
            if(e.target.id === "search_down"&& this.current_selected_result < results_len){
                this.current_selected_result++;
            }else if(this.current_selected_result > 1){
                this.current_selected_result--;

            }
            this.search_info_element.html(this.current_selected_result + " of " + results_len);
            this.setSearchArrows();
            this.gotoSearchResult();
        }

        searchKeyInCells()
        {
            delete this.current_results;
            this.current_results = {};
            this.search_key = this.search_key.toLowerCase();
            _.each(this.es_controller.table.getSheet().getCells(), function (cell,row_key) {
                _.each(cell, function(c,col_key){
                    if(!(_.isUndefined(c) || _.isEmpty(c))){
                        if(_.has(c, 'value')){
                            var value = c.value.toLowerCase();
                            if(value.includes(this.search_key))
                                this.current_results[row_key + col_key] = {row_id : row_key , col_id : col_key};
                        }
                    }
                }.bind(this));
            }.bind(this));
            this.current_selected_result = (Object.keys(this.current_results).length > 0) ?  1 : 0;
        }

        highlightSearchResults()
        {
            //unhighlight
            _.each(this.previous_result_cells, function(cell){
                cell.removeHighlight();
            });
            //highlight
            this.previous_result_cells = [];
            _.each(this.es_controller.table.getSheet().rows, function(row){
                _.each(this.es_controller.table.getSheet().cols, function(col){
                    if(row + col in this.current_results){
                        var cell = $('td[data-row_id="' + row + '"][data-col_id="' + col + '"]');
                        cell.highlight(this.search_key);
                        this.previous_result_cells.push(cell);
                    }
                }.bind(this))
            }.bind(this));
        }

        onSearch(e){
            let debounce = _.debounce(function(e){
                if(e.keyCode == 13){//ENTER
                    this.getNewResult({target :{id : "search_down"}});
                    return;
                }

                this.search_key = this.filter_key_element.val();
                this.searchKeyInCells();

                if(this.current_selected_result == 0 || this.search_key === ""){
                    this.resetSearchBar();
                }else{
                    this.highlightSearchResults();
                    this.setSearchArrows();
                    this.gotoSearchResult();
                    this.search_info_element.html((this.current_selected_result != 0) ? "1 of " + Object.keys(this.current_results).length : "0 of 0");
                }
            }.bind(this), 500);
            debounce(e);
        }

        //PAGINATION STUFFS
        // add pages by number (from [s] to [f])
        add(s, f)
        {
            for (let i = s; i < f; i++) {
                if(i == this.page)
                    this.code += '<a class="active">' + i + '</a>';
                else
                    this.code += '<a class="page">' + i + '</a>';
            }
        }

        // add last page with separator
        last() {
            this.code += '<a>...</a><a class="page">' + this.size + '</a>';
        }

        // add first page with separator
        first() {
            this.code += '<a class="page">1</a><a>...</a>';
        }

        // find pagination type
        getPagination()
        {
            this.code = '<a id="pagination_prev">&#9668;</a>';// previous button

            if (this.size < this.step * 2 + 6) {
                this.add(1, this.size + 1);
            }else if (this.page < this.step * 2 + 1) {
                this.add(1, this.step * 2 + 4);
                this.last();
            }else if (this.page > this.size - this.step * 2) {
                this.first();
                this.add(this.size - this.step * 2 - 2, this.size + 1);
            }else {
                this.first();
                this.add(this.page - this.step, this.page + this.step + 1);
                this.last();
            }
            this.code +=  '<a id="pagination_next">&#9658;</a>'; // next button
            this.pagination_controller_element.html(this.code);
        }

        // previous page
        prev()
        {
            this.page--;
            if (this.page < 1) this.page = 1;
            this.pageSelection();
        }

        // next page
        next()
        {
            this.page++;
            if (this.page > this.size) this.page = this.size;
            this.pageSelection();
        }

        pageSelection(page, direction)
        {
            if(_.isUndefined(direction) && !_.isUndefined(page) ) this.page = page;
            this.getPagination();
            this.goToPageInGrid();
            if(_.isUndefined(direction) || direction > 0)
                this.current_cell_to_scroll = this.es_controller.table.getSheet().rows[this.rows_delta] + "-" + this.es_controller.table.getSheet().cols[0];
            else
                this.current_cell_to_scroll = this.es_controller.table.getSheet().rows[this.es_controller.table.getSheet().rows.length - this.rows_delta] + "-" + this.es_controller.table.getSheet().cols[0];
            this.es_controller.table.render({row_headers_offset : this.getFirstRowIndex()});
        }

        onPageSelection(e){
            this.page = +e.target.innerHTML;
            this.pageSelection();
        }

        goToPageInGrid()
        {
            let offset_last, offset_first;
            offset_first = (this.chunk * (this.page - 1));
            offset_last  = (this.chunk * this.page);

            if(this.page == 1){
                this.first_index_row = 0;
                this.last_row_index  = offset_last + this.rows_delta;
            }else if(this.page == this.size){
                this.first_index_row = offset_first - this.rows_delta;
                this.last_row_index  = offset_last  + this.rows_delta + this.rows_in_last_page;
            }else{
                this.first_index_row = offset_first - this.rows_delta;
                this.last_row_index  = offset_last + this.rows_delta;
            }

            this.es_controller.table.getSheet().rows = this.es_controller.table.getSheet().allRows.slice(this.first_index_row, this.last_row_index);
        }

        getPageForRow(row)
        {
            return Math.floor(Object.values(this.es_controller.table.getSheet().allRows).indexOf(row) / this.chunk ) + 1;
        }

        scrollTo(cell)
        {
            let margin = this.rows_delta * 5;
            this.es_controller.table.$grid.scrollLeft(cell.offset().left - margin);
            this.es_controller.table.$grid.scrollTop( cell.offset().top  - (this.es_controller.table.$grid[0].scrollHeight / 2));
        }

        scroll()
        {
            if ( this.es_controller.table.$grid[0].scrollTop > this.lastScrollTop ) {
                //down
                let delta = this.rows_delta * 2;
                this.max_scroll = (this.es_controller.table.$grid[0].scrollHeight - this.es_controller.table.$grid.height()); //+ delta;//8;
                if((this.es_controller.table.$grid[0].scrollTop >= this.max_scroll - delta && this.es_controller.table.$grid[0].scrollTop <= this.max_scroll + delta ) &&
                    this.page < this.size) {
                    this.page++;
                    this.pageSelection(this.page - 1, 1);
                }
            } else {
                //up
                if(this.es_controller.table.$grid[0].scrollTop == 0 && this.page > 1) {
                    this.page--;
                    this.pageSelection(this.page + 1, 0);
                }
            }
            this.lastScrollTop = this.es_controller.table.$grid[0].scrollTop;
        }

        onChunkChange(e)
        {
            this.chunk = +e.target.options[e.target.selectedIndex].value;

            this.size = Math.floor(this.es_controller.table.getSheet().allRows.length / this.chunk);
            this.rows_in_last_page = this.es_controller.table.getSheet().allRows.length % this.chunk;
            if(this.rows_in_last_page > 0) this.size += 1;

            if(this.page > this.size) this.page = this.size;

            if(this.size > 1) this.pageSelection();
        }


    };

    module.exports.View   = PaginationView;
});