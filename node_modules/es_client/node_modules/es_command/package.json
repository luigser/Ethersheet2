{
  "name": "es_command",
  "version": "0.0.0",
  "description": "command and message protocol for ethersheet",
  "main": "es_command.js",
  "scripts": {
    "test": "make"
  },
  "dependencies": {
    "amdefine": ">=0.0.2"
  },
  "repository": "",
  "author": {
    "name": "tedsuo"
  },
  "license": "BSD",
  "readme": "````javascript\nCommand = require('es_command');\n\n// create either from json\nmsg_string = '{\"id\":\"123\",\"type\":\"user\",\"action\":\"setName\",\"params\":[\"ricky\"]}';\ncommand = new Command(msg_string);\n\n// or from a hash\nmsg = {\n  id: 123,\n  type: \"user\",\n  action: \"setName\",\n  params: [\"ricky\"]\n};\ncommand = new Command(msg);\n\n// Accessors\ncommand.getDataId() // 123\ncommand.getDataType() // \"user\"\ncommand.getAction() // \"setName\"\ncommand.getParams() //  [\"ricky\"]\ncommand.getMessage() // message in hash format\ncommand.getSerializedMessage() // message in json format\n\n// Execute\n\n// run the command's action on a given object\ncommand.execute(current_user); \n\n// if the command accepts a callback, you can do async/chaining\ncommand.execute(current_user,function(err,result){\n\n  // the command calls current_user.setName(\"ricky\",cb)\n  // and setName would run this code whenever it would run cb()\n\n});\n````",
  "readmeFilename": "README.md",
  "_id": "es_command@0.0.0",
  "_shasum": "49e331c479bf1c8430e08e180c44c42818cbd5fb",
  "_resolved": "git+https://github.com/ethersheet-collective/es_command#66f8027f7fe8005e4163f713c5c3f47c2028761a",
  "_from": "es_command@git+https://github.com/ethersheet-collective/es_command"
}
