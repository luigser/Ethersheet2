if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}
define( function(require,exports,module)
{
    /*const ol = require('ol');
    const Geocoder = require('ol').Geocoder*/

    const MapView = require('./map_view').View;

    class MapDialog extends MapView
    {
        constructor(params)
        {
            super(params);
            this.config = JSON.parse(JSON.stringify(this.config));
            this.config.VIEW    = "map_dialog";
            this.config.ELEMENT = "#es-modal-box";

            this.events = {
                'change #interaction_type' : 'changeInteraction',
                'click #sat_map_button'    : 'makeVisibleSatLayer',
                'click #add_map_button'    : 'addToMap',
                'click #es-modal-close'    : 'close'
            };

            this.selected_interaction = "Marker";
            this.template_view        = "map_dialog";
        }

        initializeElements()
        {
            super.initializeElements();
            this.modal_overlay = $('#es-modal-overlay');
            this.overlay       = $(".es-overlay");
            this.modal_overlay.show();
        }

        loadStyle()
        {
            super.loadStyle();
            super.loadSupportStyles(['ol3-geocoder.min']);
        }

        loadView()
        {
            super.loadView();
        }

        postRendering()
        {
            super.postRendering();
            //this.modal_overlay.show();
            //Instantiate with some options and add the Control
            this.overlay = new ol.Overlay({
                element: document.getElementById('popup'),
                offset: [0, -40]
            });

            this.geocoder = new Geocoder('nominatim', {
                provider: 'photon',
                lang: 'en',
                placeholder: 'Search for ...',
                limit: 5,
                keepOpen: true,
                preventDefault : true
            });

            this.map.addControl(this.geocoder);

            //Listen when an address is chosen
            this.geocoder.on('addresschosen', function(evt){
                this.olview.setCenter(evt.coordinate);
                this.olview.setZoom(16);
                if(this.selected_interaction == "Marker") {
                    this.setMarker(evt.coordinate);
                }
            }.bind(this));

            this.map.on('click', function(evt) {
                if(this.selected_interaction == "Marker") {
                    this.setMarker(evt.coordinate);
                }
            }.bind(this));
        }

        changeInteraction(e){
            this.selected_interaction = $(e.currentTarget).find(":selected").html();
            this.addInteraction();
        }

        addInteraction() {
            if(this.draw != null) this.map.removeInteraction(this.draw);
            let geometryFunction, maxPoints, interaction_type = this.selected_interaction;
            switch(this.selected_interaction){
                case "Square":
                    interaction_type = "Circle";
                    geometryFunction = ol.interaction.Draw.createRegularPolygon(4);
                    break;
                case "Box":
                    interaction_type = "LineString";
                    maxPoints = 2;
                    geometryFunction = function(coordinates, geometry) {
                        if (!geometry) {
                            geometry = new ol.geom.Polygon(null);
                        }
                        var start = coordinates[0];
                        var end = coordinates[1];
                        geometry.setCoordinates([
                            [start, [start[0], end[1]], end, [end[0], start[1]], start]
                        ]);
                        return geometry;
                    };
                    break;
            }

            if(this.selected_interaction != "Marker") {
                this.draw = new ol.interaction.Draw({
                    source: this.source,
                    type: interaction_type,
                    geometryFunction: geometryFunction,
                    maxPoints: maxPoints,
                    style : this.getTextStyle(-12)
                });

                this.map.addInteraction(this.draw);

                this.draw.on('drawend', function(e) {
                    e.feature.setStyle(this.getTextStyle(-12));
                }.bind(this));
            }
        }

        getTextStyle(offsetX) {
            return new ol.style.Style({
                fill: new ol.style.Fill({
                    color: 'rgba(255, 255, 255, 0.6)'
                }),
                stroke: new ol.style.Stroke({
                    color: '#ffff00',
                    width: 4
                }),
                text : new ol.style.Text({
                    fill : new ol.style.Fill({
                        color : '#000'
                    }),
                    stroke : new ol.style.Stroke({
                        color : '#fff',
                        width : 4
                    }),
                    text : this.label,
                    font : '20px Verdana',
                    offsetX : offsetX ? offsetX : 0,
                    offsetY : 12
                })
            });
        }

        getGeoJSON(){
            let allFeatures = this.draw_layer.getSource().getFeatures();
            let format      = new ol.format.GeoJSON();
            return format.writeFeatures(allFeatures);
        }

        makeVisibleSatLayer(e){
            this.satLayer.setVisible(!this.satLayer.getVisible());
        }

        addToMap(e){
            let data;
            if(this.selected_interaction == "Marker") {
                data =  (!_.isUndefined(this.coords)) ? _.clone(this.coords).reverse().join(",") : "";
            }else{
                data = this.getGeoJSON();
            }
            this.es_controller.table.getSheet().updateCell($(this.cell).attr('data-row_id'), $(this.cell).attr('data-col_id'),data);
            $(this.$el).empty();
            this.modal_overlay.hide();
            //this.overlay.remove();
        }

        close(){
            $(this.$el).empty();
        }

    };

    module.exports.View = MapDialog;
});
