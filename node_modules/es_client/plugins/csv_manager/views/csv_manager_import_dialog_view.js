if (typeof define !== 'function') {
    let define = require('amdefine')(module);
}
define( function(require,exports,module) {
    const $        = require('jquery');
    const BaseView = require('core_plugins/base_plugin/views/base_view').View;

    class ImportDialogView extends BaseView {
        constructor(params) {
            super(params);
            this.config = JSON.parse(JSON.stringify(this.config));
            this.events = {
                'click #csv_file' : 'onClickFile',
                'change #csv_file': 'onChangedFile'
            };
            this.initializeElements();
            this.template_view          = "csv_manager_import_dialog_view";
            this.config.ELEMENT_TO_FILL =  "#es-modal-box"
            this.config.ELEMENT         =  "#es-modal-box"
        }

        initializeElements()
        {
            super.initializeElements();
            this.modal_overlay = $('#es-modal-overlay');
            this.overlay       = $(".es-overlay");
        }

        preRendering() {
            this.template_data = {current_sheet_id : this.es_controller.table.template_data.id};
            this.modal_overlay.show();
            super.render();
        }

        onClickFile(event) {
            event.currentTarget.value = null;
        }

        onChangedFile(event) {
            let input = event.target;

            //Init the view.
            document.getElementById("errorMessage").innerText   = "";
            document.getElementById("warningMessage").innerText = "";

            $('#tblPreview').hide();
            $('#tblHeader').remove();
            $('#tblBody').remove();
            $('#errorList').empty();
            $('#warningList').empty();

            //Read file.
            let filereader = new FileReader();
            filereader.readAsText(input.files[0]);
            filereader.onload = function(evt){
                let csvDataset = filereader.result;
                this.errorList = $('#errorList');
                this.warnList  = $('#warningList');

                //Extract file name.
                let fullPath = document.getElementById('csv_file').value;
                if (fullPath) {
                    let startIndex = (fullPath.indexOf('\\') >= 0 ? fullPath.lastIndexOf('\\') : fullPath.lastIndexOf('/'));
                    let filename = fullPath.substring(startIndex);
                    if (filename.indexOf('\\') === 0 || filename.indexOf('/') === 0) {
                        filename = filename.substring(1);
                    }
                    $('#csvFileName').text(filename);
                }

                //Read the CSV Content.
                let csvparser = new csvjson();
                let jsonDataset = csvparser.read(csvDataset);

                //Check whether there are warnings.
                if (jsonDataset.warnings.length > 0) {
                    document.getElementById("warningMessage").innerText = "Additional suggested things to optionally check are:";
                    this.warnList.show();
                    for (let i=0; i<jsonDataset.warnings.length; i++) {
                        let warnMsg = jsonDataset.warnings[i];
                        this.warnList.append('<li>' + warnMsg.description + '</li>');
                    }
                }

                //Check whether there are errors in the csv.
                if (jsonDataset.errors.length > 0) {
                    let errormessage = "The CSV file has the following errors:";
                    document.getElementById("errorMessage").innerText = errormessage;
                    this.errorList.show();
                    for (let i=0; i<jsonDataset.errors.length; i++) {
                        let errMsg = jsonDataset.errors[i];
                        this.errorList.append('<li>' + errMsg.description + '</li>');
                    }
                    $('#btnSubmit').hide();
                    return false;
                }

                //Creates the table.
                tblPreview.style.display = "table";
                let thead = document.createElement("thead"); thead.id = "tblHeader";
                let tbody = document.createElement("tbody"); tbody.id = "tblBody";
                $('#tblPreview').prepend(thead, tbody);

                let tHeadRow = document.createElement("tr");
                let $tblHeaderTR = $('#tblHeader').append(tHeadRow);
                let $tblHeader = $('#tblHeader');
                let $tblBody = $('#tblBody');

                //Shows the columns.
                for (let i=0; i<jsonDataset.fields.length; i++) {
                    let col = document.createElement("th");
                    col.textContent = jsonDataset.fields[i].label;
                    $tblHeaderTR.append(col);
                }

                //Shows the first five columns.
                let upperbound = Math.min(5, jsonDataset.records.length);
                for (let i=0; i<upperbound; i++) {
                    let record = jsonDataset.records[i];
                    let tRow = document.createElement("tr");
                    let $row = $(tRow);
                    $tblBody.append(tRow);

                    for (let j=0; j<jsonDataset.fields.length; j++) {
                        let field = jsonDataset.fields[j];
                        let col = record[field.name];
                        let tcol = document.createElement('td');
                        tcol.innerText = col;
                        $row.append(tcol);
                    }
                }
                $('#footerLine').attr('colspan', jsonDataset.fields.length);
                $('#btnSubmit').show();
            }.bind(this);
            filereader.onerror = function (evt) {
                let errormessage = evt.target.error;
                document.getElementById("errorMessage").innerText = errormessage;
            }

            return true;
        }
    };

    module.exports.View = ImportDialogView;

});