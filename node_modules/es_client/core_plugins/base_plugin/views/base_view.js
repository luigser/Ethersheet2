if (typeof define !== 'function') { var define = require('amdefine')(module) }
define( function(require,exports,module)
{
    const RefBinder      = require('ref-binder');
    const _              = require('underscore');
    const $              = require('jquery');
    const PluginsManager = require('lib/plugins_manager').PluginsManager;
    const View           = require('backbone').View;

    const BaseViewEvents = {
        BaseViewPreRendering  : "BaseViewPreRendering",
        BaseViewPostRendering : "BaseViewPostRendering",
        BaseViewRendering     : "BaseViewRendering"
    };

    class BaseView extends View
    {
        constructor(params)
        {
            super();

            this.plugin_manager = new PluginsManager();

            this.models         = new RefBinder(this);
            this.config         = params.config;
            this.template_view  = this.config.VIEW;
            this.template_data  = {};
            this.events         = {};

            if(!_.isUndefined(params.es)) {
                this.es_controller = params.es;
                this.es_node_ethersheet = params.es_ethersheet;
                this.es_node_element = params.es_el;
                this.es_node_header_element = params.es_header;
                this.es_node_header_panel_0 = params.es_panel_0;
                this.es_node_header_panel_1 = params.es_panel_1;

                this.setSelection(this.es_controller.data.selections.getLocal() || null);
                this.setSheets(this.es_controller.data.sheets || null);
                this.setUser(this.es_controller.data.users.getCurrentUser());
                this.setSheet(this.es_controller.data.sheets.get(this.getUser().getCurrentSheetId()) || null);
            }
            //this.plugin_manager.subscriveEvent(BaseViewEvents.BaseViewRendering, this.render.bind(this));
        }

        getSelection(){
            return this.models.get('selection');
        }

        setSelection(selection){
            this.models.set('selection',selection);
        }

        getSelections(){
            return this.models.get('selections');
        }

        getLocalSelection(){
            return this.models.get('local_selection');
        }

        getSheet(){
            return this.models.get('sheet');
        }

        setSheet(sheet){
            this.models.set('sheet',sheet);
        }

        getSheets(){
            return this.models.get('sheets');
        }

        setSheets(sheets){
            this.models.set('sheets', sheets);
        }

        getUser(){
            return this.models.get('user');
        }

        getCurrentUser(){
            return this.models.get('current_user');
        }

        setUser(user){
            this.models.set('user', user, {
                'change_current_sheet_id' : 'onChangeCurrentSheetID',
            });
        }

        getId(){
            //userd to get cid
            return this.getCurrentUser().getCurrentSheetId();
        }

        delegateEvents(events) {
            if (!events) return;
            this.undelegateEvents();
            for (var key in events) {
                var method = events[key];
                if (!_.isFunction(method)) method = this[events[key]];
                if (!method) throw new Error('Method "' + events[key] + '" does not exist');
                var match = key.match(/^(\S+)\s*(.*)$/);
                var eventName = match[1], selector = match[2];
                method = _.bind(method, this);
                eventName += '.delegateEvents' + this.cid;
                if (selector === '') {
                    this.$el.bind(eventName, method);
                } else {
                    this.$el.delegate(selector, eventName, method.bind(this));
                }
            }
        }

        loadStyle()
        {
            let styles   = document.createElement('link');
            styles.rel   = 'stylesheet';
            styles.type  = 'text/css';
            styles.media = 'screen';
            styles.href  = '../es_client/' + this.plugin_manager.getPluginPath(this.config.NAME) + '/styles/' + this.template_view + '.css';
            document.getElementsByTagName('head')[0].appendChild(styles);
        }

        loadSupportStyles(stylesheets)
        {
            for(let s in stylesheets) {
                let styles = document.createElement('link');
                styles.rel = 'stylesheet';
                styles.type = 'text/css';
                styles.media = 'screen';
                styles.href = '../es_client/' + this.plugin_manager.getPluginPath(this.config.NAME) + '/styles/' + stylesheets[s] + '.css';
                document.getElementsByTagName('head')[0].appendChild(styles);
            }
        }

        loadView(callback, params)
        {
            $.get('../es_client/' + this.plugin_manager.getPluginPath(this.config.NAME) + '/templates/' + this.template_view + '.jst',
                function (html)
                {
                    let placeholder = null;
                    switch(this.config.PLACEHOLDER)
                    {
                        case 'es':
                            placeholder = this.es_node_element;
                            break;
                        case 'es_header':
                            placeholder = this.es_node_header_element;
                            break;
                        case 'es_panel_0':
                            placeholder = this.es_node_header_panel_0;
                            break;
                        case 'es_panel_1':
                            placeholder = this.es_node_header_panel_1;
                            break;
                        case 'es_ethersheet':
                            placeholder = this.es_node_ethersheet;
                            break;
                        default:
                            //if(!_.isUndefined(placeholder)) placeholder = $('#ethersheet');
                            if(!_.isUndefined(placeholder)) placeholder = $(this.config.PLACEHOLDER);;
                            break;
                    }
                    if($(this.config.ELEMENT_TO_FILL).length){
                        $(this.config.ELEMENT_TO_FILL).html(_.template(html, this.template_data))
                    }else{
                        placeholder.prepend(_.template(html, this.template_data));
                    }
                    this.initializeElements();
                    this.delegateEvents(this.events);
                    this.postRendering(callback, params);
                }.bind(this)
            );
        }

        //Setting dom elements
        initializeElements()
        {
            this.$el = $(this.config.ELEMENT/*, this.es_controller.$el*/);
            this.$el.i18n();
        }

        preRendering(callback, params){
            if(!_.isNull(callback) && !_.isUndefined(callback)) callback.apply(null, params);
        }

        postRendering(callback, params){
            if(!_.isNull(callback) && !_.isUndefined(callback)) callback.apply(null, params);
        }

        render(callback, params){
            this.loadStyle();
            this.loadView(callback, params);
        }
    };

    module.exports.Events = BaseViewEvents;
    module.exports.View   = BaseView;
});
