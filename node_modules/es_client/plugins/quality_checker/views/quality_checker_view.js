if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}
define( function(require,exports,module)
{
    const _jsDataChecker     = require('jsdatacheckermodule');
    const $                  = require('jquery');
    const BaseView           = require('core_plugins/base_plugin/views/base_view').View;
    const  ExpressionHelpers = require('lib/expression_helpers');

    class QualityCheckerView extends BaseView {
        constructor(params) {
            super(params);
            this.config = JSON.parse(JSON.stringify(this.config));
            this.config.PLACEHOLDER = "es_panel_0"
            this.config.ELEMENT     = "#es-quality-checker-menu-container";
            this.template_view      = "quality_checker_view"

            this.events = {
                'click .es-button' : 'onRunQualitycheckerClick',
                'click #prev_issue': 'onPrevIssueClick',
                'click #next_issue': 'onNextIssueClick',
            };

            this.initializeElements();

            this.warningPointer = { pointer: -1, label: '', message: '', cells: [] };
            this.template_data  =  {eh: new ExpressionHelpers(this.data)};
        }

        preRendering()
        {
            super.render();
        }

        getCurrentCell(){
            let cells = this.getSelection().getCells();
            if(!cells) return;
            return cells[0];
        }

        _findInsertionPlace(cells, rowIndex) {
            let index = 0;
            for (let cell=null; index<cells.length && (cell=cells[index]); index++) {
                if (cell.rowIndex > rowIndex) return index;
            }
            return index;
        }

        onRunQualitycheckerClick(e) {
            $('#spiQualitychecker').show();
            $('#panelQualitychecker').hide();

           let current_sheet_id = this.getUser().getCurrentSheetId();
           let jsonDataset = this._generateJSONFromSheet(current_sheet_id);
           let current_sheet = this.getSheets().get(current_sheet_id);

           let _converter =  _jsDataChecker();

            //Checks the dataset quality.
            let path = [ "records", "*" ]
            let analysisResults =  _converter.inferJsonDataType(jsonDataset, path,
                { filterOnThresholdConfidence: false, trackCellsForEachType: true});

            //Initialize the pointer object.
            $('.warning').removeClass('warning');
            this.warningPointer.pointer = -1;
            this.warningPointer.cells = [];
            const _keys = Object.keys(analysisResults.types);
            for (let iKey=0; iKey<_keys.length; iKey++) { //Loop through columns (types).
                let _type = analysisResults.types[_keys[iKey]];//Get column type.
                if (typeof _type.cellsWithWarnings === 'undefined' || _type.cellsWithWarnings.length == 0) continue; //No warnings.

                //There are cells with warnings, collect them in a huge array to be used.
                for (let _iCell=0; _iCell<_type.cellsWithWarnings.length; _iCell++) {
                    let _wrongCell = _type.cellsWithWarnings[_iCell];
                    let _wrongColKey = _wrongCell.columnKey;
                    let _wrongRowKey = current_sheet.allRows[(_wrongCell.rowIndex+1)];
                    _wrongCell.rowKey = _wrongRowKey;
                    _wrongCell.jqSelector = "td[data-row_id='" + _wrongRowKey + "'][data-col_id='" + _wrongColKey + "']";

                    //Here it inserts the item in the array, ordered by rowIndex using the insertion sort.
                    let insertionIndex = this._findInsertionPlace(this.warningPointer.cells, _wrongCell.rowIndex);
                    this.warningPointer.cells.splice(insertionIndex, 0, _wrongCell);
                }//EndFor.
            }//EndFor.

            //////////////////////////////////////////////
            //Activates the next and prev issues buttons.
            if (this.warningPointer.cells.length > 0) {
                this.warningPointer.pointer = -1;
                $('#prev_issue').addClass("search_arrows_enabled");
                $('#next_issue').addClass("search_arrows_enabled");
                this.warningPointer.label = "Warning 1 of " + this.warningPointer.cells.length;
                $('#txtQualityIssues').text(this.warningPointer.label);
                $('#panelQualitychecker').fadeIn();
                $('#txtMessage').hide();
            } else {
                this.warningPointer.pointer = -1;
                $('#prev_issue').removeClass("search_arrows_enabled");
                $('#next_issue').removeClass("search_arrows_enabled");
                this.warningPointer.label = "";
                $('#txtQualityIssues').text(this.warningPointer.label);
                $('#panelQualitychecker').hide();
                $('#txtMessage').show();
            }
            this.onNextIssueClick();

            $('#spiQualitychecker').hide();
        }

        onPrevIssueClick(e) {
            if (this.warningPointer.cells.length == 0) return; //No issues.

            if (this.warningPointer.pointer == 0) this.warningPointer.pointer = this.warningPointer.cells.length - 1;
            else this.warningPointer.pointer = ((this.warningPointer.pointer-1) % this.warningPointer.cells.length);
            this.onNextPrevIssueClick(e);
        }

        onNextIssueClick(e) {
            if (this.warningPointer.cells.length == 0) return; //No issues.
            this.warningPointer.pointer = ((this.warningPointer.pointer+1) % this.warningPointer.cells.length);
            this.onNextPrevIssueClick(e);
        }

        onNextPrevIssueClick(e) {
            const _cell = this.warningPointer.cells[this.warningPointer.pointer];
            this.es_controller.pagination_controller.current_cell_to_scroll = _cell.rowKey + "-" + _cell.columnKey;
            this.es_controller.pagination_controller.pageSelection(this.es_controller.pagination_controller.getPageForRow(_cell.rowKey));
            //this.es_controller.pagination_controller.scrollTo($(_cell.jqSelector));

            this.warningPointer.label = "Warning " + (this.warningPointer.pointer+1) + " of " + this.warningPointer.cells.length;
            $('#txtQualityIssues').text(this.warningPointer.label);

            $('#issue_description').text((_cell.warningMessage !== 'undefined')? _cell.warningMessage : '-');

            $(".warning").removeClass("warning");

            setTimeout(function() { $(_cell.jqSelector).addClass("warning"); }, 200);
        }

        _generateJSONFromSheet(sheet_id) {
            let sheet = this.getSheets().get(sheet_id);
            //This piece of code, converts the sheet in CKAN compliant format.
            let records = [];
            let _rows = sheet.allRows;

            //Creates a data structure from the ethersheet.
            //It uses only the first row in this case.
            let fields = [];
            let es_header = sheet.cells[_rows[0]];
            if (typeof es_header === 'undefined') return { fields: fields, records: records };

            for (var i=0; i<sheet.cols.length; i++) {
                let es_col_key = sheet.cols[i];
                let es_cell = es_header[es_col_key];
                if (typeof es_cell !== 'undefined') {
                    let name = es_col_key;
                    let field = { name: name, label: es_cell.value, index: i, key: name };
                    fields.push(field);
                    fields[name] = field;
                }//EndIf.
            }//EndFor.

            //Loops over the rows.
            for (let ir=1; ir<_rows.length; ir++) {
                let es_row_key = _rows[ir];
                let es_row = sheet.cells[es_row_key];
                let jsonRow = {};

                //Check whether the row is null.
                if (typeof es_row === 'undefined') continue;

                //Loops over the cols.
                for (let ic=0; ic<fields.length; ic++) {
                    let colkey = fields[ic].key;
                    if (es_row.hasOwnProperty(colkey)) {
                        let es_cell = es_row[colkey];
                        if (typeof es_cell !== 'undefined' && es_cell != null)
                            jsonRow[colkey] = es_cell.value;
                    }
                }//EndForCol.

                records.push(jsonRow);
            }//EndFor.

            let jsonDataset = { fields: fields, records: records };
            return jsonDataset;
        }

    };

    module.exports.View = QualityCheckerView;
});

