if (typeof define !== 'function') { var define = require('amdefine')(module) }
define( function(require,exports,module) {
    const Emitter = require('./ethersheet_emitter');

    let instance = null;
    class PluginsManager
    {
        constructor(){
            if (!instance) {
                instance = this;
                this.event_emitter = new Emitter.EthersheetEmitter();
                this.plugins       = [];
                this.core_plugins  = [
                    'base_plugin',
                    'table',
                    //'expression_editor',
                    'function_menu'
                ];
            }
            return instance;
        }

        getPluginPath(plugin){
            return ((this.core_plugins.includes(plugin) || plugin === 'main_container') ? 'core_plugins/' : 'plugins/') + plugin;
        }

        requirePluginsByOrder(queue, callback)
        {
            if (queue.length) {
                require([queue.shift()], function(plugin) {
                    this.plugins.push(plugin);
                    plugin.subscribeEvents();
                    this.requirePluginsByOrder(queue, callback);
                }.bind(this));
            } else {
                callback.apply(null, null);
            }
        }

        loadPlugins(params)
        {
            let plugins_requires = [];
            this.core_plugins.map(function(p){ plugins_requires.push('core_plugins/' + p + '/' + p); });
            params.plugins.map(function(p){ plugins_requires.push('plugins/' + p + '/' + p); });

            this.requirePluginsByOrder(plugins_requires,
                function () {
                    this.intiPlugins(params);
                }.bind(this)
            );
        }

        refreshPluginsDelegates()
        {
            for(let p in this.plugins)
                this.plugins[p].view.delegateEvents(this.plugins[p].view.events);
        }

        /*loadPlugins(params)
        {
            let plugins_requires = [];
            this.core_plugins.map(function(p){ plugins_requires.push('core_plugins/' + p + '/' + p); });
            //params.plugins.map(function(p){ if(p != "pagination") plugins_requires.push('plugins/' + p + '/' + p); });

            require(plugins_requires, function(...loaded_plugins){
                this.plugins.push(loaded_plugins);
                loaded_plugins.map(function (plugin) {
                    plugin.subscribeEvents();
                });
                this.intiPlugins(params);
            }.bind(this));
        }*/

        //SUBSCRIBE EVENTS FUNCS
        subscriveEvent(event, callback)
        {
            this.event_emitter.subscribe(event, callback);
        }

        subscribeInitializationEvent(callback){
            this.event_emitter.subscribe(Emitter.EthersheetEvents.InitializationEvent, callback);
        }

        subscribeCreateViewEvent(callback){
            this.event_emitter.subscribe(Emitter.EthersheetEvents.CreteViewEvent, callback);
        }
        //EMIT EVENTS FUNCS
        intiPlugins(params){
            this.event_emitter.emit(Emitter.EthersheetEvents.InitializationEvent, params);
        }

        emitEvent(event, params, async)
        {
            this.event_emitter.emit(event, params, async);
        }

        createPluginsViews(params)
        {
            this.event_emitter.emit(Emitter.EthersheetEvents.CreteViewEvent, params);
        }

        unsubcribeEvents(event)
        {
            this.event_emitter.unsubribe(event);
        }

    };

    module.exports.PluginsManager = PluginsManager;

});
